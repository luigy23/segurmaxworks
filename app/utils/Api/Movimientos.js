const { default: supabase } = require("../supabase");


// create table
//   public."Movimientos" (
//     id bigint generated by default as identity,
//     created_at timestamp with time zone not null default now(),
//     "Valor" bigint not null,
//     "Tipo" text null,
//     "Descripcion" text null,
//     "Categoria" smallint null,
//     "Trabajador" text null,
//     "IdTrabajo" integer null,
//     constraint Movimientos_pkey primary key (id)
//   ) tablespace pg_default;



export const obtenerMovimientos = async () => {
    const { data, error } = await supabase
        .from("Movimientos")
        .select('*')
        .order('id', { ascending: false })
        .limit(10)
        
    if (error){ 
        throw error
    }
    return data
}

export const obtenerMovimientosPorId = async (id) => {
    const { data, error } = await supabase
        .from("Movimientos")
        .select('*')
        .eq('id', id)
        .single()
        
    if (error){ 
        throw error
    }
    return data
}

export const obtenerMovimientosPorIdTrabajo = async (idTrabajo) => {
    const { data, error } = await supabase
        .from("Movimientos")
        .select('*')
        .eq('IdTrabajo', idTrabajo)
        .order('id', { ascending: false })
        
    if (error){ 
        throw error
    }
    return data
}

export const obtenerMovimientosPorIdTrabajador = async (idTrabajador) => {
    const { data, error } = await supabase
        .from("Movimientos")
        .select('*')
        .eq('Trabajador', idTrabajador)
        .order('id', { ascending: false })
        
    if (error){ 
        throw error
    }
    return data
}

export const crearMovimiento = async (movimiento) => {
    const { data, error } = await supabase
        .from('Movimientos')
        .insert([
            movimiento
        ])
    if (error){ 
        console.log(error)
        throw error
    }
    return data
}
//formato para el objeto movimiento:
// {
//     "Valor": 10000,
//     "Tipo": "Ingreso",
//     "Descripcion": "Pago de trabajo",
//     "Categoria": 1,
//     "Trabajador": "Juan",
//     "IdTrabajo": 1
// }




export const actualizarMovimiento = async (id, movimiento) => {
    const { data, error } = await supabase
        .from('Movimientos')
        .update(movimiento)
        .eq('id', id)
    if (error){ 
        throw error
    }
    return data
}

export const eliminarMovimiento = async (id) => {
    const { data, error } = await supabase
        .from('Movimientos')
        .delete()
        .eq('id', id)
    if (error){ 
        throw error
    }
    return data
}

